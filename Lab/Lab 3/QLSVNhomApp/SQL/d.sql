-- d.sql
USE QLSVNhom;
GO

-- Xóa procedure nếu tồn tại trước khi tạo mới
IF OBJECT_ID('SP_INS_DIEM', 'P') IS NOT NULL
    DROP PROCEDURE SP_INS_DIEM;
GO

-- Stored procedure SP_INS_DIEM: Cập nhật điểm thi cho sinh viên, 
-- mã hóa điểm sử dụng hàm dbo.EncryptRSA512 và khóa bí mật là Public Key của nhân viên.
CREATE PROCEDURE SP_INS_DIEM
    @MASV VARCHAR(20),
    @MAHP VARCHAR(20),
    @DIEM FLOAT,
    @PUBKEY VARCHAR(20)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE BANGDIEM
    SET DIEMTHI = dbo.EncryptRSA512(CAST(@DIEM AS VARCHAR(10)), @PUBKEY)
    WHERE MASV = @MASV AND MAHP = @MAHP;
END
GO

-- Xóa procedure nếu tồn tại trước khi tạo mới
IF OBJECT_ID('SP_GET_CLASSES', 'P') IS NOT NULL
    DROP PROCEDURE SP_GET_CLASSES;
GO

CREATE PROCEDURE SP_GET_CLASSES
AS
BEGIN
    SELECT MALOP, TENLOP, MANV
    FROM LOP;
END
GO

-- Xóa procedure nếu tồn tại trước khi tạo mới
IF OBJECT_ID('SP_SEARCH_CLASSES', 'P') IS NOT NULL
    DROP PROCEDURE SP_SEARCH_CLASSES;
GO

CREATE PROCEDURE SP_SEARCH_CLASSES
    @MALOP NVARCHAR(100)
AS
BEGIN
    SET NOCOUNT ON;
    SELECT MALOP, TENLOP, MANV FROM LOP 
    WHERE MALOP = @MALOP;
END
GO

-- Xóa procedure nếu tồn tại trước khi tạo mới
IF OBJECT_ID('SP_GET_STUDENTS_BY_CLASS', 'P') IS NOT NULL
    DROP PROCEDURE SP_GET_STUDENTS_BY_CLASS;
GO

CREATE PROCEDURE SP_GET_STUDENTS_BY_CLASS
    @MALOP NVARCHAR(20)
AS
BEGIN
    SET NOCOUNT ON;
    SELECT MASV, HOTEN, NGAYSINH, DIACHI, MALOP
    FROM SINHVIEN
    WHERE MALOP = @MALOP;
END
GO

-- Xóa procedure nếu tồn tại trước khi tạo mới
IF OBJECT_ID('SP_FIND_STUDENT_IN_CLASS', 'P') IS NOT NULL
    DROP PROCEDURE SP_FIND_STUDENT_IN_CLASS;
GO

CREATE PROCEDURE SP_FIND_STUDENT_IN_CLASS
    @MASV NVARCHAR(20),
    @MALOP NVARCHAR(20)
AS
BEGIN
    SET NOCOUNT ON;
    SELECT MASV, HOTEN, NGAYSINH, DIACHI, MALOP
    FROM SINHVIEN
    WHERE MASV = @MASV AND MALOP = @MALOP;
END
GO

-- Xóa procedure nếu tồn tại trước khi tạo mới
IF OBJECT_ID('SP_UPDATE_STUDENT_INFO', 'P') IS NOT NULL
    DROP PROCEDURE SP_UPDATE_STUDENT_INFO;
GO

CREATE PROCEDURE SP_UPDATE_STUDENT_INFO
    @MASV NVARCHAR(20),
    @HOTEN NVARCHAR(100),
    @NGAYSINH DATETIME,
    @DIACHI NVARCHAR(200),
    @OLD_MALOP NVARCHAR(20),
    @NEW_MALOP NVARCHAR(20),
    @ErrorMessage NVARCHAR(200) OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    IF NOT EXISTS(SELECT 1 FROM SINHVIEN WHERE MASV = @MASV AND MALOP = @OLD_MALOP)
    BEGIN
        SET @ErrorMessage = 'Sinh viên không tồn tại trong lớp hiện tại.';
        RETURN;
    END

    IF @NEW_MALOP <> @OLD_MALOP
    BEGIN
        IF NOT EXISTS(SELECT 1 FROM LOP WHERE MALOP = @NEW_MALOP)
        BEGIN
            SET @ErrorMessage = 'Mã lớp mới không tồn tại.';
            RETURN;
        END
    END

    UPDATE SINHVIEN
    SET HOTEN = @HOTEN,
        NGAYSINH = @NGAYSINH,
        DIACHI = @DIACHI,
        MALOP = @NEW_MALOP
    WHERE MASV = @MASV AND MALOP = @OLD_MALOP;

    SET @ErrorMessage = '';
END
GO

-- Xóa procedure nếu tồn tại trước khi tạo mới
IF OBJECT_ID('SP_GENERATE_NEW_STUDENT_ID', 'P') IS NOT NULL
    DROP PROCEDURE SP_GENERATE_NEW_STUDENT_ID;
GO

CREATE PROCEDURE SP_GENERATE_NEW_STUDENT_ID
AS
BEGIN
    DECLARE @NewID INT;
    DECLARE @MaxID NVARCHAR(20);
    SELECT @MaxID = MAX(MASV) FROM SINHVIEN;
    IF @MaxID IS NULL
        SET @NewID = 1;
    ELSE
        SET @NewID = CAST(SUBSTRING(@MaxID, 2, LEN(@MaxID)) AS INT) + 1;
    SELECT 'S' + RIGHT('000' + CAST(@NewID AS NVARCHAR(10)), 3) AS NewMASV;
END
GO

-- Xóa procedure nếu tồn tại trước khi tạo mới
IF OBJECT_ID('SP_DELETE_STUDENT', 'P') IS NOT NULL
    DROP PROCEDURE SP_DELETE_STUDENT;
GO

CREATE PROCEDURE SP_DELETE_STUDENT
    @MASV NVARCHAR(20),
    @MALOP NVARCHAR(20),
    @ErrorMessage NVARCHAR(200) OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    IF NOT EXISTS(SELECT 1 FROM SINHVIEN WHERE MASV = @MASV AND MALOP = @MALOP)
    BEGIN
        SET @ErrorMessage = 'Sinh viên không tồn tại trong lớp.';
        RETURN;
    END

    DELETE FROM SINHVIEN
    WHERE MASV = @MASV AND MALOP = @MALOP;

    SET @ErrorMessage = '';
END
GO
